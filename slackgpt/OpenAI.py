import requests
from ChatBotThread import ChatBotThread
from Bot import Bot
import json
from Question import Question
import time
from Logger import *

class OpenAIBot(Bot):

    def __init__(self, api_key: str, model: str = "text-davinci-003", max_tokens: int = 2048, temperature: float = 0.5, amount: int = 1, ):
        """Extends bot and adds the Davinci model

        Args:
            api_key (str): The OpenAI API key
            model (str, optional): The OpenAI model. Defaults to "text-davinci-003".
            max_tokens (int, optional): The maximum amount of tokens generated by the model. Defaults to 2048.
            temperature (float, optional): The random variability. Defaults to 0.5.
            amount (int, optional): The amount of options to generate. Defaults to 1.
        """
        self.api_key = api_key
        self.model = model
        self.max_tokens = max_tokens
        self.temperature = temperature
        self.amount = amount
        self.headers = {
            "content-type": "application/json",
            "Authorization": "Bearer " + self.api_key
        }
        self.lg = Logger("DavinciBot", Level.DEBUG, Logger.minecraft_formatter, {}, [FileHandler(Level.DEBUG, Logger.minecraft_formatter, generator=lambda directory, _: (directory + "/" if directory else "") + "requests.log"), FileHandler.error_file_handler])

    def ask(self, question: str) -> str:
        """Asks the davinci model through the OpenAI API

        Args:
            question (str): The question prompt

        Returns:
            str: The answer
        """
        data = {
            "model": self.model,
            "prompt": question,
            "max_tokens": self.max_tokens,
            "n": self.amount,
            "temperature": self.temperature
        }
        try:
            response = requests.post("https://api.openai.com/v1/completions", headers=self.headers, data=json.dumps(data))
            text = response.json()["choices"][0]["text"]
            return text
        except Exception as e:
            self.lg.error(f"response = {response}")
            self.lg.error(f"response.choices[0].text = {text}")
            self.lg.error(f"data = {data}")


class OpenAIBotThread(ChatBotThread):

    def __init__(self, handler, browser, prefix, headless=True):
        super().__init__(handler, browser, prefix, headless)
        self.lg.name = "DavinciApi"
        self.create_bot = lambda: OpenAIBot(open("OPENAI_KEY", "r").read())

    def ask(self, question: Question):
        self.lg.info(f"Asking Davinci with prompt {question.text[(len(self.prefix) if not question.direct_message else 0):]}")
        start = time.time()
        self.lg.warning(question)
        question.answer(self.bot.ask(question.text[(len(self.prefix) if not question.direct_message else 0):]))
        self.lg.info(f"Answered {question.username} in {time.time() - start} seconds")

